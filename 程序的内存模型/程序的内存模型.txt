C++程序在执行的时候，将内存大致划分为 4个区域。
分别是 代码区 全局区 栈区 堆区
代码区： 存放函数体的二进制代码 由操作系统进行管理
全局区： 存放全局变量 静态变量 以及 常量 其中常量包括字符串常量和const修饰的全局变量(全局常量)
栈区：    由编译器自动分配释放 存放函数的参数值 局部变量等
堆区：    由程序员分配和释放 也即由程序员自行管理数据的生命周期 若程序员不释放 程序结束时由操作系统回收  在C++中用关键字 new 在堆中开辟内存 用new生成的返回值是指针 指针在本质上也是局部变量 其也存放在栈上 指针指向的对象保存的数据在堆区上

内存四区的意义：
不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程


1.1程序运行前
程序在编译后 生成exe可执行程序 未执行前分为两个区域  分别是代码区 和 全局区 在执行后才会出现 栈区 和堆区

代码区： 存放CPU执行的机器指令
代码区共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
代码区只读的，使其只读的原因是防止程序意外地修改了它的指令

全局区： 是全局变量 静态变量 常量区 还包含有字符串常量以及其他常量(由const修饰)
该区域的数据在程序结束后由操作系统释放 

注意：只要是局部变量 哪怕有const修饰 其也不存在于全局区

静态变量 在普通变量前面加static，属于静态变量
const修饰的变量，const修饰的全局变量，全局常量

1.2程序运行后
栈区：
由编译器自动分配释放，存放函数的参数值，局部变量等
注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放

堆区：
由程序员分配释放，若程序员不释放，程序结束时由操作系统回收
在C++中主要利用new在堆区开辟内存

利用new关键字 可以将数据开辟到堆区,也即使用new关键字创建堆区的数据

new int(初始值); new创建的对象返回的是地址，可以用指针来接收这行代码的返回值

int * p = new int(10);
return p;


