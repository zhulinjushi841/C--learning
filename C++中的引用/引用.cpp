#include<iostream>
#include<string>
using namespace std;

//
// 2引用
// 2.1引用的基本使用
// 作用：给变量起别名
// 语法：数据类型 &别名 = 原名
// 
// 2.2引用注意事项
// 引用必须初始化
// 引用在初始化后，不可以改变
// 
// 2.3引用做函数参数
// 作用：函数传参时，可以利用引用的技术让形参修饰实参
// 优点：可以简化指针修改实参
// 
// 2.4引用做函数返回值
// 作用：引用是可以作为函数的返回值存在的
// 注意：不要返回局部变量引用
// 用法：函数调用作为左值
// 
// 2.5引用的本质
// 本质：引用的本质在C++内部实现是一个指针常量。
// 指针常量是指针指向不可改，也说明为什么引用不可修改。
// 
// 例如：
// int& ref = a;
// 在编译器中自动转化为：
// int * const ref = &a;
// 
// 2.6常量引用
// 作用：常量引用主要用来修饰形参，防止误操作
// 在函数形参列表中，可以加const修饰形参，防止形参改变实参
//

void showValue(const int& val)
{
	cout << " val = " << val << endl;
}

int& test01()
{
	int a = 10;		//局部变量存放在四区中的 栈区
	return a;
}

//2.函数的调用可以作为左值
int& test02()
{
	static int a = 10;		//静态变量，存放在全局区，全局区中的数据在程序结束后系统释放
	return a;
}

int main()
{
	int& ref = test01();
	
	cout << "ref = " << ref << endl;	//第一次结果正确，是因为编译器做了保留
	cout << "ref = " << ref << endl;	//第二次结果错误，因为a的内存已经释放

	int& ref2 = test02();
	cout << "ref2 = " << ref2 << endl;
	cout << "ref2 = " << ref2 << endl;

	test02() = 1000;					//这里test02()返回的是一个引用，如果函数的返回值是引用，这个函数调用可以作为左值
	cout << "ref2 = " << ref2 << endl;
	cout << "ref2 = " << ref2 << endl;


}