1.成员变量和成员函数分开存储
只有非静态成员变量才属于类的对象 包括非静态函数和静态成员均不属于类的对象
空对象占用的内存空间为1 C++为每个对象分配一个字节空间 为了区分空对象占用内存的位置 每个空对象也应有一个独一无二的内存地址

2.this指针
this指针指向被调用的成员函数所述的对象
this指针是隐含在每一个非静态成员函数中的一种指针 this指针不需要定义 直接使用即可
this指针的用途：1. 当形参与成员函数同名时，可用this指针进行区分    2.在类的非静态函数中返回对象本身 可以使用 return *this
注意：如果需要返回对象的本体而非副本 这里需要返回一个引用
Person & PersonAddAge(Person &p)
{
	this->age+=age;
	return *this;
}
在上述函数返回引用之后，就可以使用链式编程，例如 p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1)... 		可以无限叠加

3.空指针访问成员函数
C++中的空指针也可以调用成员函数 但要注意有没有用到this指针 如果用到了 需要加上判断代码以增加代码的鲁棒性 
例如：
if(this==nullptr)
	return;

4.const修饰成员函数
常函数 
在成员函数后加const后我们称该函数为常函数 这里的const修饰的是this指针 指针指向的值也不可修改
this指针是指针常量 在上述PersonAddAge函数中的this指针就是 Person *const this,在加上了const修饰之后就成为了const Person* const this。
常函数不可修改成员属性
但在成员属性声明前加关键字 mutable 后，在常函数中就可以修改
常对象
在声明对象前加上const 称该对象为常对象
常对象只能调用常函数