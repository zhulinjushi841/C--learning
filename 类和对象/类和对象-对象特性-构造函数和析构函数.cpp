#include<iostream>
#include<string>
using namespace std;
//
// 4.2对象的初始化和清理
// 在生活中我们买的电子产品基本都会有出厂设置
// C++中的面向对象来源于生活，每个对象也都会有初始设置以及
//  对象销毁前的清理数据的设置
// 
// 4.2.1构造函数和析构函数
// 对象的初始化和清理也是两个非常重要的问题
// 一个对象或者变量没有初始状态，对其使用后果是未知的
// 同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题
// 
// C++使用了构造函数和析构函数来解决上述问题，这两个函数将会被编译器自动调用
// 完成对象初始化和清理工作
// 对象的初始化和清理工作是编译器强制要我们做的事，因此如果不提供构造和析构函数，
// 编译器会提供，但其提供的构造函数和析构函数都是空实现
// 
// 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用
// 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。
// 
// 
// 构造函数语法：类名(){}
// 1.构造函数，没有返回值也不写void
// 2.函数名称与类名相同
// 3.构造函数可以有参数，因此可以发生重载
// 4.程序在调用对象的时候自动调用构造，无序手动调用，而且只会调用一次
// 
// 析构函数语法：~类名(){}
// 1.析构函数，没有返回值，也不写void
// 2.函数名称与类名相同，在名称前加上符号~
// 3.析构函数不可以有参数，因此不可以发生重载
// 4.程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次
//

//对象初始化和清理
//1.构造函数 进行初始化操作
class Person
{
public:
	//1.构造函数
	// 1.构造函数，没有返回值也不写void
	// 2.函数名称与类名相同
	// 3.构造函数可以有参数，因此可以发生重载
	// 4.程序在调用对象的时候自动调用构造，无序手动调用，而且只会调用一次
	//

	Person()
	{
		cout << "Person构造函数的调用" << endl;
	}

	//2.析构函数 进行清理的操作
	// 1.析构函数，没有返回值，也不写void
	// 2.函数名称与类名相同，在名称前加上符号~
	// 3.析构函数不可以有参数，因此不可以发生重载
	// 4.程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次
	~Person()
	{
		cout << "Person的析构函数调用" << endl;
	}

};

//构造和析构都是必须有的实现，如果不提供，编译器会提供一个空实现
void test01()
{
	Person p;	//在栈上的数据，test01执行完毕后，释放这个对象
}

int main()
{
	test01();
	system("pause");
	return 0;
}



