#include<iostream>
#include<vector>
using namespace std;
//
// 指针
// 7.1指针的基本概念
// 指针的作用：可以通过指针间间接访问内存
// 内存编号是从0开始记录的，一般使用十六进制数字表示
// 可以利用指针变量保存地址
// 
// 7.2指针变量的定义和使用
// 1.定义指针
// 指针变量定义语法： 数据类型 * 变量名
// 2.使用指针
// 可以通过解引用的方式来找到指针指向的内存
// 在指针前 加 *，代表解引用，找到指针指向的内存
// 
// 7.3指针所占内存空间
// 在32位操作系统下，不管是什么数据类型，均占用4个字节空间，64位下则均占8个字节空间
// 注：一个16进制数代表4位bit，两个16进制数代表一个字节
// 在VS的配置器中，x64代表的是64位系统，x86代表的是32位系统
// 
// 
// 7.4空指针和野指针
// 空指针：指针变量指向内存编号为0的空间
// 用途：初始化指针变量
// 注意：空指针指向的内存是不可访问的
// 
// 
// 1.空指针用于给指针变量进行初始化
// int *p = NULL;
// int *p = nullptr; 
// 2.空指针是不可以进行访问的
// 0~255之间的内存编号是系统占用的，因此不可以访问
// 
// 
// 野指针：指针变量指向非法的内存空间
// 例如：   int * p = (int *)0x1100;
// 虽然在语法上没有问题，但是在程序实际运行的过程中会引发异常，读取访问权限冲突
// 在程序中，尽量应当避免使用野指针
// 
// 总结：空指针和野指针都不是我们申请的空间，因此不要访问
// 
// 7.5const修饰指针
// const修饰指针有着三种情况：
// 1.const修饰指针――――常量指针
// const int * p = &a;
// 常量指针
// 特点：
// 指针的指向可以修改，但是指针指向的值不可以修改，也即指针存的是常量的地址
// 
// 2.const修饰常量――――指针常量
// int *const p = &a;
// 指针常量
// 特点：
// 指针的指向不可修改，但是指针指向的值可以修改
// 
// 3.const既修饰指针，又修饰常量
// const int * const p = &a;
// 特点：
// 指针的指向和指针指向的值都不可以修改
//


int main()
{
	int a = 10;
	int* p = &a;

	cout << &a << endl;
	cout << int(&a) << endl;
	cout << p << endl;
	cout << sizeof(int *) << endl;

	return 0;
}

int main()
{
	//1.const修饰指针 常量指针
	int a = 10;
	int b = 10;
	const int* p = &a;
	//指针指向的值不可以修改，指针的指向可以改
	p = &b;

	//2.const修饰常量 指针常量
	//指针的指向不可以修改，但是指针指向的数值可以修改
	int* const p2 = &a;
	*p2 = 100;

	//3.const修饰指针和常量
	const int* const p3 = &a;

	system("pause");
	return 0;

}